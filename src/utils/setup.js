

import {
    Client,
    ThreadID
} from '@textile/hub';

// Utils
import { getThread, fetchCollections} from "./db";
import { getIdentity, createIdentity, getUserAuth, newToken } from "./auth"


// Textile/auth/index.js
/*
 *
 * @param privateKey : PrivateKey type - the privateKey Identity of the user
 */
const getClient = async (privateKey) => {

    // Get UserAuth (A constant generated by the User Key genereated by hub)
    const userAuth = await getUserAuth();

    // Instantiate Client using User Auth
    const client = Client.withUserAuth(userAuth);

    // Register the user and get back a Token
    await newToken(client, privateKey);

    // Finally, return the client instance used to query the database
    return client;

}

export const loginAndSetupDB = async ({newIdentity = false}) => {
    
    // Get PrivateKey
    const privateKey = newIdentity ? await createIdentity() : await getIdentity();

    // Instantiate Client with PrivateKey
    const client = await getClient(privateKey);

    // Get current DB (thread)
    const thread = await getThread()

    // Get All Collections
    const collections = await fetchCollections(client)

    return [client, privateKey, thread, collections];
}





/*
 * 1 thread = 1 DB.
 * We are only using one predefined DB, so we will hardcode the THREAD_ID
 * And connect to that thread.
 *
 */
/*
const instantiateDB = async (client) => {

    let dbInfo;
    const threadID = ThreadID.fromString(THREAD_ID)

    // Get DB Info
    try {
        dbInfo = await client.getDBInfo(threadID);
        console.log({ dbInfo })
    } catch (err) {
        throw new Error(err)
    }

    // Join DB with DB Info
    try {
        const joined = await client.joinFromInfo(dbInfo);
        console.log({ joined })
    } catch (err) {
        throw new Error(err)
    }

}
*/




// 